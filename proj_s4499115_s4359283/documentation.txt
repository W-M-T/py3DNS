py3DNS: A simple DNS server and resolver for Python 3.6
By: Ward Theunisse, s4499115 & Luuk van Blitterswijk, s4359283
Version: 1.02

IMPORTANT NOTICE:

This assignment is based on the the 2016 implementation by Ward Theunisse (group member) & Tim van Dijk.
The code has been altered to fix bugs, work with Python 3.6 and retroactively be based on the 3.6 version of the framework. (For instance in to_bytes functions)
This has been communicated with Paul Fiterau Brostean and permission for this was given (March 24th 2017).



INTRODUCTION:

Py3DNS is a simple DNS server and resolver written in Python 3.6 for Unix-based operating systems
It is built on top of a provided framework. This framework was written in Python 3.6. Some tests are
provided in dns_tests.py.



RUNNING AND OPTIONS

The client and tests can be run from command line with several optional parameters.

#running the dns client
python3 dns_client.py [--timeout socket-timeout] [-c caching] [ -t ttl]

#running the dns server
python3 dns_server.py [-c caching] [-p PORT] [-t ttl]

#running the tests
python3 dns_tests.py [-s IP] [-p PORT]

Where:
   timeout sets the timeout in seconds of recursive dns queries
   c enables caching. Default: disabled.
   p is the port number at which the name server listens. Default: 53.
   t sets the ttl that is applied to all c
   s is the IP address in string format of the name server.



CONNECTION HANDLING:

The server listens for new connections in the main thread. When data is received, a seperate thread is made to handle that data.
In this new thread, the connectionhandler first checks if the query is about the zone that the server is authorative over.
If so, the query is answered directly with the authoritative flag set. Otherwise the request is passed on to a resolver that solves the query recursively.
We also support a couple of error responses. 4 for nonstandard queries, because we don't (and don't need to) support those, 1 for queries that contain no questions, because they don't follow the dns protocol.


RESOLVER:

In the beginning, the resolver only knows about the root servers. (There is a flag, use_rs, that disables this for tests when set to False).
Additional nameservers can also be passed, but by default this is not the case.
The resolver maintains a stack-like structure of nameservers that it can query.
While we don't have an answer, we pop the most recently added server from that stack and send it the query.
We do not request recursion.
When we get a response that contains an IPv4 address for the hostname or one of its aliases, we return the hostname and aliases along with the IP address(es).



CACHING:

The resolver is capable of using and managing a cache.
If the cache is enabled the resolver first tries to answer the query using the entries in the cache.
If this fails it proceeds performing the steps described above, but in addition, all received A- and CNAME-responses are stored in the cache if they are not already present.

The cache can be written to disk and read from disk as human-readable JSON.
To manage TTLs for records, a seperate file containing the epoch second timestamp that all ttls in the cache are relative to is stored.
When a record is looked up, only those records are considered where the sum of their ttl and the timestamp is smaller than the current epoch time.
For newly added records, their ttl is shifted forward with the elapsed time relative to the timestamp in order to make the ttl correct relative to now, without having to update all the other records in the cache.
We also intermittently clean the entire cache. This happens whenever a resource is looked up and the last cleanup was over an hour ago.
In the cleanup, all expired records are thrown away, ttls for the other records are updated and the universal timestamp is updated.
Before a record is returned during lookup, we make a deep copy for which we update the ttl to be correct relative to now instead of the universal timestamp. This copy isn't written to cache and the original record is kept intact. This ensures that the ttl is "roughly" correct
for the receiving host ("roughly" because travel times aren't accounted for). This is necessary because timestamps are not part of the DNS protocol.



TRANSACTION IDS:

When a transaction ID needs to be generated we pick a random number between 0 and 2^16 - 1.
This number becomes the transaction ID.



CONCURRENCY:

To enable py3DNS to safely use concurrency we had to make minor adjustments.
Multiple records being added to the cache simultaneously could be troublesome. Therefore we make use of a lock that allows only one record to be added at a time.

Also, even though we only use UDP, sockets are not thread safe. We solved this only allowing one thread to send through the
socket at a time, also making use of a lock.


PROBLEMS ENCOUNTERED:
We honestly didn't really encounter any big problems. Any small problem we encountered were easily overcome by debug statements.



LIBRARIES USED:

The following libraries have been used:
    * unittest      for the tests
    * json          for storing and loading the cache
    * struct        for conversion between binary and other types
    * re            for paring the zone file and checking validity of hostnames

In addition, the following (quite) standard libraries have been used:
    * argsparse:    for parsing command line arguments
    * time:         for managing the ttl of cache entries
    * sys:          for passing extra arguments to unittest
    * theading:     for handling each connection on its own thread and for mutex
    * socket:       for networking
