py3DNS: A simple DNS server and resolver for Python 3.6
By: Ward Theunisse, s4499115 & Luuk van Blitterswijk, s4359283
Version: 1.01

IMPORTANT NOTICE:

This assignment is based on the the 2016 implementation by Ward Theunisse (group member) & Tim van Dijk.
The code has been altered to fix bugs, work with Python 3.6 and retroactively be based on the 3.6 version of the framework. (For instance in to_bytes functions)
This has been communicated with Paul Fiterau Brostean and permission for this was given (March 24th 2017).


INTRODUCTION:

Py3DNS is a simple DNS server and resolver written in Python 3.6 for Unix-based operating systems
It is built on top of a provided framework. This framework was written in Python 3.6. Some tests are
provided in dns_tests.py.

RUNNING AND OPTIONS

The client and tests can be run from command line with several optional parameters.

#running the dns client
python3 dns_client.py [--timeout socket-timeout] [-c caching] [ -t ttl]
#running the tests
python3 dns_tests.py [-s IP] [-p PORT]
Where:
   timeout sets the timeout in seconds of recursive dns queries
   c enables caching. Default: disabled.
   p is the port number at which the name server listens. Default: 53.
   t sets the ttl that is applied to all c
   s is the IP address in string format of the name server.



RESOLVER:

In the beginning, the resolver only knows about the root servers. (There is a flag, use_rs, that disables this for tests).
Additional nameservers can also be passed, but by default this is not the case.
The resolver maintains a stack-like structure of nameservers that it can query.
While we don't have an answer, we pop the most recently added server from that stack and send it the query.
We do not request recursion.
When we get a response that contains an IP for the hostname or one of its aliases, we return the hostname and aliases along
with the IP address(es).



LIBRARIES USED:

The following libraries have been used:
    * unittest      for the tests
    * json          for storing and loading the cache
    * struct        for conversion between binary and other types
    * re            for paring the zone file and checking validity of hostnames

In addition, the following (quite) standard libraries have been used:
    * argsparse:    for parsing command line arguments
    * time:         for managing the ttl of cache entries
    * sys:          for passing extra arguments to unittest
    * theading:     for handling each connection on its own thread and for mutex
    * socket:       for networking